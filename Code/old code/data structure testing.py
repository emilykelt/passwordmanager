#MODULES
import random
from lists import * #words and common, from another file



#PROBABLY THE CLASS STRUCTURE(S)

#TODO: Potentially master username/password and inherit username into class password


class Password():

    #TODO: - Read in Passwords from file only if username matches

    
    def __init__(self): 
        #service that the password is being stored for

        #this is the user's username that they logged into the system with
        self.username = ""
        
        self.service = "" 

    
        #autogenerated password 
        self.password = "" #idk if it works to do the function of the function
        
        #autogenerated strength/time to crack (in years)
        self.strength = self.timeTaken()

    def generatePassword(self):     
        #local variables
        if self.password != "":
            return self.password
        else:
            generated = ['']*3

            password = ''

            #generate three word password and add on num/ special characters inbetween
        
            #generate words
            for i in range(len(generated)):
                generated[i] = (words[random.randint(0,len(words)-1)]).capitalize()
            
            #add them to password
            for i in range(len(generated)):
                password += generated[i]
            
                for x in range(random.randint(0,3)):
                    password += chr(random.randint(48,57))

            #makes sure password is greater than 12 characters
            if len(password) < 12:
                for x in range(12-len(password)):
                    password += chr(random.randint(48,57))

            return password

    def validatePass(self):
        password = self.password
        
        valid = False
    
        while valid == False:
            # Checks if password generated matches any common passwords                                                         
            if any(common in password.lower() for common in common):        # and regenerates it if it does
                self.password = self.generatePassword()
            else:
                valid = True


    def timeTaken(self):
        #TODO: update to make sure its accurate & make it look nicer
        password = self.password
        length = len(password)
        ways = (26*2 + 21)  ** length
        seconds = ways / 1000000000     # assuming a password cracker can attempt 1bn passwords per second
        days = seconds / 86400          # 86400 seconds in a day
        years = days / 365              # 365 days in a year, not including leap days

        timeToCrack = round(years,2)

        return timeToCrack
        
        

    def __str__(self):
        outputstring = ""
        outputstring += str(self.username) + " " + str(self.service) + " " + str(self.password) + " " + str(self.strength)
        return outputstring

#ARRAY OF OBJECTS

#Passwords = [Password() for i in range(10)] #TODO is this 20 users or 20 passwords? ERROR HERE?

#READING FILE CODE FOR LATER

user_index = 1 #for example, find this with binary search
def read_file_data(user_index):
    #needs seaching algorithm to find user index(?)TODO
        with open("passwords.csv") as readfile:    #prepares to read data from text file 
            line = readfile.readline().rstrip('\n')         #gets data from each line
            while line: #repeats for every line
                items = line.split(",")
                username=str(items[0]) 
                service=int(items[1]) 
                password=int(items[2]) 
                timetaken=int(items[3]) 
                line = readfile.readline().rstrip('\n')
                print(username,service,password,timetaken)
                #Passwords[user_index].append(Password(username,service,password,timetaken)) #change to setter methods
            
        #return Passwords


#TESTING CODE

myPassword = Password()
#Passwords = read_file_data(0)

#print(Password[0].password)

#TODO:
"""
- make sure password is validated
- inputs???????????????????????????????????????????????????????
- array of user objects? array of array of objects? <- viable
- RSA
- integration
-getter and setter methods
"""
