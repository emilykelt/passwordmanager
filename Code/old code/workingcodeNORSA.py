 #MODULES
import random
from lists import * #words and common, from another file

#THE CLASS STRUCTURE(S)

#TODO: Potentially master username/password and inherit username into class password
class superLogin():
    def __init__(self):
        self._username = ""
        self._password = ""

    #getters
    def getUsername(self):
        return self._username
    
    def getPassword(self):
        #this is where RSA decryption would go
        temp = ''
        temp = self._password 
        return temp 
    
    #setters
    def setUsername(self, username):
        self._username = username

    def setPassword(self, password):
        self._password = password

    #polymorphism custom print function
    def __str__(self):
        outputstring = ""
        outputstring += str(self._username) + " " + str(self._password)
        return outputstring
    
class Password(superLogin):

    def __init__(self):
        superLogin.__init__(self)  
        
        self._service = ""         #service that the password is being stored for
        
        self._password = str(self.generatePassword()) 
        self.validatePassword()
        
        #autogenerated strength/time to crack (in years)
        self._strength = self.timeTaken()

    def generatePassword(self):
        
        #local variables
        generated = ['']*3

        password = ''

        #generate three word password and add on num/ special characters inbetween
    
        #generate words
        for i in range(len(generated)):
            generated[i] = (words[random.randint(0,len(words)-1)]).capitalize()
        
        #add them to password
        for i in range(len(generated)):
            password += generated[i]
        
            for x in range(random.randint(0,3)):
                password += chr(random.randint(48,57))

        #makes sure password is greater than 12 characters
        if len(password) < 12:
            for x in range(12-len(password)):
                password += chr(random.randint(48,57))
                
        #this is where RSA encryption would go probably
            
        return password

    def validatePassword(self):
        password = self._password
        
        valid = False
    
        while not valid:
            # Checks if password generated matches any common passwords or if it's empty, or if its too long and hard to memorise                                                       
            if any(substring in password.lower() for substring  in common) or password =="" or len(password)>20:
                # and regenerates it if it does
                password= self.generatePassword()
                self._password = password
            else:
                valid = True
        


    def timeTaken(self):
        password = self._password
        length = len(password)
        ways = (26*2 + 21)  ** length
        seconds = ways / 1000000000     # assuming a password cracker can attempt 1bn passwords per second
        days = seconds / 86400          # 86400 seconds in a day
        years = days / 365              # 365 days in a year, not including leap days

        timeToCrack = round(years,2)

        return timeToCrack
        
    #GETTER METHODS

    def getService(self):
        return self._service
    
    def getStrength(self):
        return self._strength

    #SETTER METHODS
    
    def setService(self, service):
        self._service = service

    def setTimeTaken(self, timeTaken):
        self._timeTaken = timeTaken
    
    #CUSTOM PRINT FUNCTION POLYMORPHISM
    def __str__(self):
        outputstring = ""
        outputstring += str(self._username) + " " + str(self._service) + " " + str(self._password) + " " + str(self._strength)
        return outputstring

#FILE HANDLING
def readLoginCSV(file):
    users = []
    with open(file) as readfile:    #prepares to read data from text file 
        line = readfile.readline().rstrip('\n')

        while line: #repeats for every line
            items = line.split(",")

            user= superLogin()
            
            username= str(items[0])
            password = str(items[1])

            user.setUsername(username)
            user.setPassword(password)

            users.append(user)
            line = readfile.readline().rstrip('\n')   

    return users  

def readPasswordsCSV(file, masterusername): #master username is the current user that is active
    details = []
    with open(file) as readfile:    #prepares to read data from text file 
        line = readfile.readline().rstrip('\n')

        while line: #repeats for every line
            items = line.split(",") #splits items up
            
            #get username
            username= str(items[0])

            #see if password belongs to the user logged in (masterusername)
            if username == masterusername:
                
                #read in rest to array of objects
                password = str(items[1])
                service = str(items[2])
                strength = float(items[3])
                
                #create instance of object
                detail= Password()

                #use setter methods
                detail.setUsername(username)
                detail.setPassword(password)
                detail.setService(service)
                detail.setTimeTaken(strength)

                #add object to array
                details.append(detail)
            
            #next line
            line = readfile.readline().rstrip('\n')   

    #TODO: what happens if user cannot be found??? we must have validation beforehand to check that the user is present in the file, but this will happen when validating the login 
    return details  

#ALGORITHMS
def sortArrayObjects(list):
    value = 0
    index = 0
    for i in range(1,len(list)):
        value = list[i]   #double check oop sorting
        index = i
        while index > 0 and value.getService() < list[index-1].getService():
            list[index]=list[index-1]  
            index = index-1
        list[index] = value

    return list

def validateLogin(inputUser,inputPass,users):   #TODO:change to binary search
    valid = False
    for i in range(len(users)): 
        if users[i].getUsername() == inputUser and users[i].getPassword() == inputPass: #compare current username and password
            valid = True

    return valid


#NEW PASSWORD THINGS
def addPasswordArray(masterusername,service,details,file):
    detail= Password()

    #use setter methods
    detail.setUsername(masterusername)
    detail.setService(service)
    #password and time taken will auto generate

    #add object to array
    details.append(detail)

    #write to file
    DataFile = open(file,'a')
    DataFile.write(detail.getUsername() + "," + detail.getPassword() + "," + detail.getService() + "," + str(detail.getStrength())+"\n")
    DataFile.close()
    
    details = sortArrayObjects(details) #sort password details into ascending password order, do this every time a new password is added

    return details



#FIND PASSWORD
def findPassword(goal,details):
    details = sortArrayObjects(details) # insertion sorts the passwords first
    
    found = False
    startpos = 0
    endpos = len(details) #-1

    while (startpos <= endpos) and found == False:
        
        middle = (startpos+endpos)//2 #// is integer div
        
        if details[middle].getService() == goal:
            found = True
            return middle
            
        elif details[middle].getService() <goal:
            startpos = middle + 1
        else:
            endpos = middle - 1

    if found == False:
        print("not found")
        return -1

def regeneratePassword(index, details, masterusername): #file?
    if index == -1:
        print("Cannot regenerate, service not found")
    else:
        password = details[index].generatePassword()
        details[index].setPassword(password)
        details[index].validatePassword()

        editPasswordFile('passwords.csv', details, masterusername)

    return details

def editPasswordFile(file, details, masterusername): #TODO: everything else but regenerated password is deleted
    #get everything from file before
    alldetails = []
    with open(file) as readfile:    #prepares to read data from text file 
        line = readfile.readline().rstrip('\n')

        while line: #repeats for every line
            items = line.split(",") #splits items up
            
            #get username
            username= str(items[0])

            #saves the data of all of the users who arent logged in
            #as if we read in user who was logged in, would be unable to save 
            if username != masterusername:
                
                #read in rest to array of objects
                password = str(items[1])
                service = str(items[2])
                strength = float(items[3])
                
                #create instance of object
                detail= Password()

                #use setter methods
                detail.setUsername(username)
                detail.setPassword(password)
                detail.setService(service)
                detail.setTimeTaken(strength)

                #add object to array
                alldetails.append(detail)
            
            #next line
            line = readfile.readline().rstrip('\n')   

    alldetails = details + alldetails

    #write the details to file
    DataFile = open(file, 'w')
    for i in range(len(alldetails)):
        DataFile.write(alldetails[i].getUsername() + "," + alldetails[i].getPassword() + "," + alldetails[i].getService() + "," + str(alldetails[i].getStrength())+"\n")  
    DataFile.close() 



        

#MAIN

#read in data to array for login
file = "login.csv"
users = readLoginCSV(file)



#set masterusername after login validation
main = True

while main == True: #main loop
    #recieve inputs
    inputUser = str(input("input username: "))
    inputPass = str(input("input password: "))
    
    valid = validateLogin(inputUser,inputPass,users)

    while valid != True:
        print("invalid. check username and password and try again.")
        continueLoop = str(input("continue running program? y/n :"))
        if continueLoop == 'n':
            main = False
            break
        else:
            inputUser = str(input("input username: "))
            inputPass = str(input("input password: "))

            valid = validateLogin(inputUser,inputPass,users)

    while valid == True:  #login loop
        print("valid\n")
        masterusername = inputUser

        file = "passwords.csv"
        details = readPasswordsCSV(file,masterusername)
        for i in range(len(details)):
            print(details[i].getService())


        #loop to simulate the program, able to keep repeating actions, add password or find password
        choice = ""
        while True: #interaction with passwords loop
            choice = str(input("---------------------\nn for new password \nf to display password\nr to regenerate\nl to logout\nq to quit\n---------------------\n"))
            
            if choice == "l":
                valid = False
                break
            
            if choice == 'q':
                valid = False
                main = False
                break
            
            elif choice == 'n':
                service = str(input("service to add a password to: "))
                details = addPasswordArray(masterusername,service,details,file)

                #print out array
                for i in range(len(details)):
                    print(details[i].getService())
                    
            elif choice =='f':
                goal = str(input("What is the service of the password you are searching for?: "))
                index = findPassword(goal,details)
                print(details[index].getPassword())
                
            elif choice == 'r':
                goal = str(input("What is the service of the password you are wanting to regenerate?: "))
                index = findPassword(goal,details)
                details = regeneratePassword(index,details,masterusername)
                print(details[index].getPassword())
                #TODO: works, doesnt save to file
            else:
                print("invalid choice")
        



"""TODO:

- fix file issue
- integreate RSA
- integration with WEB not calculus you fool

username is master username in all cases


username    password    service     strength



"""
